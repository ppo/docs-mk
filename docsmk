#!/usr/bin/env bash
#
# DocsMk CLI to manage standalone documentation.
#
# Usage: docsmk [COMMAND=serve]
#
#   serve      Run the local server to preview the documentation.
#   build      Build the documentation.
#   clean      Remove the build directory.
#   config     Show settings for this helper.
#   deploy     Deploy build directory via rsync.
#              It executes `build` before and `clean` after.
#   install    Create a virtualenv and install pip packages.
#   upgrade    Upgrade the pip packages.
#   uninstall  Remove the virtualenv.
#   help       Show this usage.


# KISS Colors (v1): https://github.com/ppo/bash-colors/blob/master/kiss-colors.sh
if (( $( tput colors ) >= 8 )); then
  readonly reset="\e[0m"       # Uppercase = bold.
  readonly black="\e[0;30m";   readonly BLACK="\e[1;30m"
  readonly red="\e[0;31m";     readonly RED="\e[1;31m"
  readonly green="\e[0;32m";   readonly GREEN="\e[1;32m"
  readonly yellow="\e[0;33m";  readonly YELLOW="\e[1;33m"
  readonly blue="\e[0;34m";    readonly BLUE="\e[1;34m"
  readonly magenta="\e[0;35m"; readonly MAGENTA="\e[1;35m"
  readonly cyan="\e[0;36m";    readonly CYAN="\e[1;36m"
  readonly white="\e[0;37m";   readonly WHITE="\e[1;37m"

  readonly cHEADING="$WHITE"
  readonly cHEADING_EM="$YELLOW"
  readonly cWARNING="$magenta"
  readonly cERROR="$red"
  readonly cSUCCESS="$green"
  readonly cABORT="$RED"
  readonly cLABEL="$blue"
  readonly cEM="\e[36m"
fi

function heading() { echo -e "\n${cHEADING}${1}${reset}"; }
function warning() { echo -e "${cWARNING}Warning: ${1}${reset}"; }
function error()   { echo -e "${cERROR}ERROR: ${1}${reset}"; }
function success() { echo -e "${cSUCCESS}${1:-Successfully done.}${reset}"; }
function abort()   { echo -e "${cABORT}Abort. ${1}${reset}"; exit; }
#/KISS Colors


if [ -z "$( which realpath )" ]; then
  function realpath() { 
    [ -d "${1}" ] && printf "$( cd "${1}" >/dev/null 2>&1 && pwd )" || printf "${1}"
  }
fi

readonly __FILE__="$( readlink -f "${BASH_SOURCE[0]}" )"
readonly __DIR__="$( realpath "$( dirname "${__FILE__}" )" )"
readonly __FILENAME__="$( basename "$__FILE__" )"

# Using MkDocs config.
if [ -f "${__DIR__}/mkdocs.yml" ]; then
  readonly MKDOCS_CONFIG="${__DIR__}/mkdocs.yml"
else
  readonly MKDOCS_CONFIG="$( realpath "$( find "$__DIR__" -maxdepth 2 -type f -name mkdocs.yml | head -n 1 )" )"
fi
[ -f "$MKDOCS_CONFIG" ] || abort "MkDocs config not found in ${cEM}${__DIR__}${cABORT}"

readonly DOCSMK_DIR="$( dirname "$MKDOCS_CONFIG" )"

function get_config() { cat "$MKDOCS_CONFIG" | awk "/^${1}:/ {print \$2}" || "$2"; }
readonly VENV_DIR="${DOCSMK_DIR}/.venv"
readonly SRC_DIR="$( realpath "${DOCSMK_DIR}/$( get_config "docs_dir" "src" )" )"
readonly BUILD_DIR="$( realpath "${DOCSMK_DIR}/$( get_config "site_dir" "build" )" )"
readonly DEPLOY_DST="$( get_config "deploy_dst" )"
readonly DEPLOY_URL="$( get_config "deploy_url" )"


function activate_venv() {
  [ "$VIRTUAL_ENV" = "$VENV_DIR" ] && return
  [ -n "$VIRTUAL_ENV" ] && { source "${VIRTUAL_ENV}/bin/activate"; deactivate; }

  if [ ! -d "$VENV_DIR" ]; then
    error "DocsMk is not installed."
    printf "${cHEADING_EM}Install it?${reset} (Y/n) "
    read -s -n 1 answer; echo
    if [ -z "$answer" ] || [ "$answer" = "y" ]
      then do_install
      else abort "To install it later, execute: ${cEM}${__FILENAME__} install${cABORT}"
    fi
  fi

  source "${VENV_DIR}/bin/activate"
}

function do_serve() {
  activate_venv
  local dev_addr="$( grep "^dev_addr:" "$MKDOCS_CONFIG" | sed "s/dev_addr://;s/['\" ]//g" )"
  [ -z "$dev_addr" ] && dev_addr="127.0.0.1:8000"
  heading "Serving documentation on ${cHEADING_EM}http://${dev_addr}${cHEADING}"
  echo -e "${cEM}Press Ctrl+C to quit.${reset}"
  mkdocs serve --config-file="$MKDOCS_CONFIG"
}

function do_build() {
  activate_venv
  heading "Building documentation…"
  mkdocs build --config-file="$MKDOCS_CONFIG"
  if (( $? == 0 )); then
    success "Successfully created in ${cEM}${BUILD_DIR}${cSUCCESS}"
    echo -e "Open in browser: ${cEM}file://${BUILD_DIR}/index.html${reset}"
  fi
}

function do_clean() {
  heading "Cleaning documentation build…"
  rm -fr "$BUILD_DIR"
  (( $? == 0 )) && success
}

function do_config() {
  heading "DocsMk Config:"
  echo
                          echo -e "  ${cLABEL}DocsMk Root:   ${cEM}${DOCSMK_DIR}${reset}"
                          echo -e "  ${cLABEL}Virtual Env:   ${cEM}${VENV_DIR}${reset}"
                          echo -e "  ${cLABEL}MkDocs Config: ${cEM}${MKDOCS_CONFIG}${reset}"
                          echo -e "  ${cLABEL}Doc Sources:   ${cEM}${SRC_DIR}${reset}"
                          echo -e "  ${cLABEL}Build Dir:     ${cEM}${BUILD_DIR}${reset}"
  [ -n "$DEPLOY_DST" ] && echo -e "  ${cLABEL}Deploy Dest:   ${cEM}${DEPLOY_DST}${reset}"
  [ -n "$DEPLOY_URL" ] && echo -e "  ${cLABEL}Deploy URL:    ${cEM}${DEPLOY_URL}${reset}"
}

function do_deploy() {
  if [ -z "$DEPLOY_DST" ]; then
    error "${cEM}deploy_dst${cERROR} not defined in ${cEM}mkdocs.yml${cERROR}."
    echo -e "To deploy to Read the Docs, see: https://github.com/ppo/docsmk#read-the-docs"
    abort
  fi

  do_build
  (( $? == 0 )) || return
  heading "Rsync'ing documentation to ${cHEADING_EM}${DEPLOY_URL}${cHEADING}…"
  rsync -aurz --delete "${BUILD_DIR%/}/" "${DEPLOY_DST%/}/"
  if (( $? == 0 )); then
    success
    [ -n "$DEPLOY_URL" ] && echo -e "Open in browser: ${cEM}${DEPLOY_URL}${reset}"
    do_clean
  fi
}

function do_install() {
  [ -d "$VENV_DIR" ] && abort "DocsMk already installed."
  local bin_dir="${VENV_DIR}/bin"
  [ -d "${DOCSMK_DIR}/.git" ] && rm -fr "${DOCSMK_DIR}/.git"

  heading "Installing DocsMk…"
  python3 -m venv "$VENV_DIR"
  activate_venv
  ln -s "$( realpath --relative-to="$bin_dir" "$__FILE__" )" "$bin_dir"

  do_upgrade

  if [ ! -d "$SRC_DIR" ]; then
    heading "Creating documentation directory…"
    mkdir "$SRC_DIR"
    if (( $? == 0 )); then
      echo "# Title of Your Documentation" > "${SRC_DIR}/index.md"
      success "Successfully created: ${cEM}${SRC_DIR}${cSUCCESS}"
    fi
  fi
}

function do_upgrade() {
  activate_venv
  heading "Upgrading DocsMk…"
  pip install --upgrade -r "${DOCSMK_DIR}/requirements.txt"
  (( $? == 0 )) && success "Successfully upgraded."
}

function do_uninstall() {
  heading "Uninstalling DocsMk…"
  [ -n "$VIRTUAL_ENV" ] && deactivate
  rm -fr "$VENV_DIR"
  (( $? == 0 )) && success "Successfully uninstalled."
}

function do_help() {
  heading "DocsMk Usage:${reset} ${__FILENAME__} [${cLABEL}COMMAND${reset}=${cEM}serve${reset}]"
  echo
  echo -e "  ${cEM}serve${reset}      Run the local server to preview the documentation."
  echo -e "  ${cEM}build${reset}      Build the documentation."
  echo -e "  ${cEM}clean${reset}      Remove the build directory."
  echo -e "  ${cEM}config${reset}     Show settings for this helper."
  echo -e "  ${cEM}deploy${reset}     Deploy build directory via rsync."
  echo -e "             It executes ${cEM}build${reset} before and ${cEM}clean${reset} after."
  echo -e "  ${cEM}install${reset}    Create a virtualenv and install pip packages."
  echo -e "  ${cEM}upgrade${reset}    Upgrade the pip packages."
  echo -e "  ${cEM}uninstall${reset}  Remove the virtualenv."
  echo -e "  ${cEM}help${reset}       Show this usage."
}


case "$1" in
  ""|"serve"  ) do_serve;;
  "build"     ) do_build;;
  "clean"     ) do_clean;;
  "config"    ) do_config;;
  "deploy"    ) do_deploy;;
  "install"   ) do_install;;
  "upgrade"   ) do_upgrade;;
  "uninstall" ) do_uninstall;;
  "help"      ) do_help;;
  *) echo; error "Unknown command '${cEM}${1}${cERROR}'."; do_help;;
esac
echo
