#!/usr/bin/env bash
#
# DocsMk CLI to manage standalone documentation.
#
# Usage: docsmk [COMMAND=serve]
#
#   serve      Run the local server to preview the documentation.
#   build      Build the documentation.
#   clean      Remove the build directory.
#   install    Create a virtualenv and install pip packages.
#   upgrade    Upgrade the pip packages.
#   uninstall  Remove the virtualenv.
#   help       Show this usage.


if [ -z "$( which realpath )" ]; then
  function realpath() { echo "$( cd "${1}" >/dev/null 2>&1 && pwd )"; }
fi

readonly __FILE__="$( readlink -f "${BASH_SOURCE[0]}" )"
readonly MKDOCS_DIR="$( realpath "$( dirname "${__FILE__}" )" )"
readonly BASE_DIR="$( realpath "${MKDOCS_DIR}/.." )"
readonly MKDOCS_CONFIG="${MKDOCS_DIR}/mkdocs.yml"
readonly VENV_DIR="${MKDOCS_DIR}/.venv"
readonly DOCS_DIR="${BASE_DIR}/docs"
readonly DOCS_BUILD_DIR="${MKDOCS_DIR}/build"


function print_heading() { printf "\e[1;37m${1}\e[0m\n"; }
function print_error() { printf "\e[0;31mERROR: ${1}\e[0m\n"; }
function print_success() { printf "\e[0;32mSuccessfully ${1:-done.}\e[0m\n"; }
function abort() { printf "Abort. ${1}"; exit; }

function activate_venv() {
  [ "$VIRTUAL_ENV" = "$VENV_DIR" ] && return
  [ -n "$VIRTUAL_ENV" ] && { source "${VIRTUAL_ENV}/bin/activate"; deactivate; }

  if [ ! -d "$VENV_DIR" ]; then
    print_error "DocsMk is not installed."
    printf "\e[1;33mInstall it?\e[0m (press y or to proceed) "
    read -s -n 1 answer; echo
    if [ -z "$answer" ] || [ "$answer" = "y" ]
      then do_install
      else abort "To install it later, execute: \e[0;36mdocsmk install\e[0m"
    fi
  fi

  source "${VENV_DIR}/bin/activate"
}

function do_serve() {
  activate_venv
  local dev_addr="$( grep "^dev_addr:" "$MKDOCS_CONFIG" | sed "s/dev_addr://;s/['\" ]//g" )"
  [ -z "$dev_addr" ] && dev_addr="127.0.0.1:8000"
  print_heading "Serving documentation on \e[1;33mhttp://${dev_addr}"
  printf "\e[0;36mPress Ctrl+C to quit.\e[0m\n"
  mkdocs serve --config-file="$MKDOCS_CONFIG"
}

function do_build() {
  activate_venv
  print_heading "Building documentation..."
  mkdocs build --config-file="$MKDOCS_CONFIG"
  print_success "created in \e[0;36m${DOCS_BUILD_DIR}\e[0m"
}

function do_clean() {
  print_heading "Cleaning documentation build..."
  rm -fr "$DOCS_BUILD_DIR"
  print_success
}

function do_install() {
  [ -d "$VENV_DIR" ] && abort "DocsMk already installed."

  local bin_dir="${VENV_DIR}/bin"
  print_heading "Installing DocsMk..."
  python3 -m venv "$VENV_DIR"
  activate_venv
  ln -s "$( realpath --relative-to="$bin_dir" "${MKDOCS_DIR}/docsmk" )" "$bin_dir"

  do_upgrade

  if [ ! -d "$DOCS_DIR" ]; then
    print_heading "Creating documentation directory..."
    mkdir "$DOCS_DIR"
    echo "# Your DocsMk is ready!" > "${DOCS_DIR}/index.md"
    print_success "created: \e[0;36m${DOCS_DIR}\e[0m"
  fi
}

function do_upgrade() {
  activate_venv
  print_heading "Upgrading DocsMk..."
  pip install --upgrade -r "${MKDOCS_DIR}/requirements.txt"
  print_success "upgraded."
}

function do_uninstall() {
  print_heading "Uninstalling DocsMk..."
  [ -n "$VIRTUAL_ENV" ] && deactivate
  rm -fr "$VENV_DIR"
  print_success "uninstalled."
}

function do_help() {
  echo
  print_heading "DocsMk Usage:\e[0m docsmk [\e[0;36mCOMMAND\e[0m=\e[0;32mserve\e[0m]"
  echo
  printf "  \e[0;36mserve\e[0m      Run the local server to preview the documentation.\n"
  printf "  \e[0;36mbuild\e[0m      Build the documentation.\n"
  printf "  \e[0;36mclean\e[0m      Remove the build directory.\n"
  printf "  \e[0;36minstall\e[0m    Create a virtualenv and install pip packages.\n"
  printf "  \e[0;36mupgrade\e[0m    Upgrade the pip packages.\n"
  printf "  \e[0;36muninstall\e[0m  Remove the virtualenv.\n"
  printf "  \e[0;36mhelp\e[0m       Show this usage.\n"
  echo
}


case "$1" in
  ""|"serve") do_serve;;
  "build") do_build;;
  "clean") do_clean;;
  "install") do_install;;
  "upgrade") do_upgrade;;
  "uninstall") do_uninstall;;
  "help") do_help;;
  *) echo; print_error "Unknown command '\e[0;36m${1}\e[0;31m'."; do_help;;
esac
